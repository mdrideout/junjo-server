// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: auth.proto

package proto_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InternalAuthService_ValidateApiKey_FullMethodName = "/ingestion.InternalAuthService/ValidateApiKey"
)

// InternalAuthServiceClient is the client API for InternalAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// InternalAuthService provides a private API for the ingestion-service to
// validate API keys.
type InternalAuthServiceClient interface {
	// ValidateApiKey checks if an API key is valid.
	ValidateApiKey(ctx context.Context, in *ValidateApiKeyRequest, opts ...grpc.CallOption) (*ValidateApiKeyResponse, error)
}

type internalAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalAuthServiceClient(cc grpc.ClientConnInterface) InternalAuthServiceClient {
	return &internalAuthServiceClient{cc}
}

func (c *internalAuthServiceClient) ValidateApiKey(ctx context.Context, in *ValidateApiKeyRequest, opts ...grpc.CallOption) (*ValidateApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateApiKeyResponse)
	err := c.cc.Invoke(ctx, InternalAuthService_ValidateApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalAuthServiceServer is the server API for InternalAuthService service.
// All implementations must embed UnimplementedInternalAuthServiceServer
// for forward compatibility.
//
// InternalAuthService provides a private API for the ingestion-service to
// validate API keys.
type InternalAuthServiceServer interface {
	// ValidateApiKey checks if an API key is valid.
	ValidateApiKey(context.Context, *ValidateApiKeyRequest) (*ValidateApiKeyResponse, error)
	mustEmbedUnimplementedInternalAuthServiceServer()
}

// UnimplementedInternalAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInternalAuthServiceServer struct{}

func (UnimplementedInternalAuthServiceServer) ValidateApiKey(context.Context, *ValidateApiKeyRequest) (*ValidateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateApiKey not implemented")
}
func (UnimplementedInternalAuthServiceServer) mustEmbedUnimplementedInternalAuthServiceServer() {}
func (UnimplementedInternalAuthServiceServer) testEmbeddedByValue()                             {}

// UnsafeInternalAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalAuthServiceServer will
// result in compilation errors.
type UnsafeInternalAuthServiceServer interface {
	mustEmbedUnimplementedInternalAuthServiceServer()
}

func RegisterInternalAuthServiceServer(s grpc.ServiceRegistrar, srv InternalAuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedInternalAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InternalAuthService_ServiceDesc, srv)
}

func _InternalAuthService_ValidateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAuthServiceServer).ValidateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalAuthService_ValidateApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAuthServiceServer).ValidateApiKey(ctx, req.(*ValidateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalAuthService_ServiceDesc is the grpc.ServiceDesc for InternalAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ingestion.InternalAuthService",
	HandlerType: (*InternalAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateApiKey",
			Handler:    _InternalAuthService_ValidateApiKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
