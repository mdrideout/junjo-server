// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/ingestion.proto

package proto_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InternalIngestionService_ReadSpans_FullMethodName = "/ingestion.InternalIngestionService/ReadSpans"
)

// InternalIngestionServiceClient is the client API for InternalIngestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// InternalIngestionService provides an API for the main backend to read
// spans from the BadgerDB WAL.
type InternalIngestionServiceClient interface {
	// ReadSpans reads a batch of spans from the WAL, starting after the
	// specified ULID. This is a server-streaming RPC.
	ReadSpans(ctx context.Context, in *ReadSpansRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadSpansResponse], error)
}

type internalIngestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalIngestionServiceClient(cc grpc.ClientConnInterface) InternalIngestionServiceClient {
	return &internalIngestionServiceClient{cc}
}

func (c *internalIngestionServiceClient) ReadSpans(ctx context.Context, in *ReadSpansRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadSpansResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InternalIngestionService_ServiceDesc.Streams[0], InternalIngestionService_ReadSpans_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadSpansRequest, ReadSpansResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InternalIngestionService_ReadSpansClient = grpc.ServerStreamingClient[ReadSpansResponse]

// InternalIngestionServiceServer is the server API for InternalIngestionService service.
// All implementations must embed UnimplementedInternalIngestionServiceServer
// for forward compatibility.
//
// InternalIngestionService provides an API for the main backend to read
// spans from the BadgerDB WAL.
type InternalIngestionServiceServer interface {
	// ReadSpans reads a batch of spans from the WAL, starting after the
	// specified ULID. This is a server-streaming RPC.
	ReadSpans(*ReadSpansRequest, grpc.ServerStreamingServer[ReadSpansResponse]) error
	mustEmbedUnimplementedInternalIngestionServiceServer()
}

// UnimplementedInternalIngestionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInternalIngestionServiceServer struct{}

func (UnimplementedInternalIngestionServiceServer) ReadSpans(*ReadSpansRequest, grpc.ServerStreamingServer[ReadSpansResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadSpans not implemented")
}
func (UnimplementedInternalIngestionServiceServer) mustEmbedUnimplementedInternalIngestionServiceServer() {
}
func (UnimplementedInternalIngestionServiceServer) testEmbeddedByValue() {}

// UnsafeInternalIngestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalIngestionServiceServer will
// result in compilation errors.
type UnsafeInternalIngestionServiceServer interface {
	mustEmbedUnimplementedInternalIngestionServiceServer()
}

func RegisterInternalIngestionServiceServer(s grpc.ServiceRegistrar, srv InternalIngestionServiceServer) {
	// If the following call pancis, it indicates UnimplementedInternalIngestionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InternalIngestionService_ServiceDesc, srv)
}

func _InternalIngestionService_ReadSpans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadSpansRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InternalIngestionServiceServer).ReadSpans(m, &grpc.GenericServerStream[ReadSpansRequest, ReadSpansResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InternalIngestionService_ReadSpansServer = grpc.ServerStreamingServer[ReadSpansResponse]

// InternalIngestionService_ServiceDesc is the grpc.ServiceDesc for InternalIngestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalIngestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ingestion.InternalIngestionService",
	HandlerType: (*InternalIngestionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadSpans",
			Handler:       _InternalIngestionService_ReadSpans_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ingestion.proto",
}
