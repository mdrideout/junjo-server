// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db_gen

import (
	"context"
)

const createWorkflow = `-- name: CreateWorkflow :one
INSERT INTO
  workflows (id, name)
VALUES
  (?, ?) RETURNING id, name, created_at, updated_at
`

type CreateWorkflowParams struct {
	ID   int64
	Name string
}

func (q *Queries) CreateWorkflow(ctx context.Context, arg CreateWorkflowParams) (Workflow, error) {
	row := q.db.QueryRowContext(ctx, createWorkflow, arg.ID, arg.Name)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWorkflow = `-- name: DeleteWorkflow :exec
DELETE FROM
  workflows
WHERE
  id = ?
`

func (q *Queries) DeleteWorkflow(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWorkflow, id)
	return err
}

const getWorkflow = `-- name: GetWorkflow :one
SELECT
  id, name, created_at, updated_at
FROM
  workflows
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetWorkflow(ctx context.Context, id int64) (Workflow, error) {
	row := q.db.QueryRowContext(ctx, getWorkflow, id)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWorkflows = `-- name: ListWorkflows :many
SELECT
  id, name, created_at, updated_at
FROM
  workflows
ORDER BY
  name
`

func (q *Queries) ListWorkflows(ctx context.Context) ([]Workflow, error) {
	rows, err := q.db.QueryContext(ctx, listWorkflows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workflow
	for rows.Next() {
		var i Workflow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkflow = `-- name: UpdateWorkflow :one
UPDATE
  workflows
set
  name = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = ? RETURNING id, name, created_at, updated_at
`

type UpdateWorkflowParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateWorkflow(ctx context.Context, arg UpdateWorkflowParams) (Workflow, error) {
	row := q.db.QueryRowContext(ctx, updateWorkflow, arg.Name, arg.ID)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
