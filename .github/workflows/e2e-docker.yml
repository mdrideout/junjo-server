name: E2E Docker Tests

on:
  # Run on main branch pushes
  push:
    branches: [ master, main ]
  # Run on PRs that modify Docker files
  pull_request:
    paths:
      - '**/Dockerfile'
      - 'docker-compose*.yml'
      - '.github/workflows/e2e-docker.yml'
  # Allow manual trigger
  workflow_dispatch:

jobs:
  docker-e2e-tests:
    name: Full Stack Docker E2E
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file with secrets
        run: |
          cat > .env << EOF
          JUNJO_BUILD_TARGET=development
          JUNJO_ENV=development
          JUNJO_SESSION_SECRET=${{ secrets.JUNJO_SESSION_SECRET }}
          JUNJO_SECURE_COOKIE_KEY=${{ secrets.JUNJO_SECURE_COOKIE_KEY }}
          JUNJO_ALLOW_ORIGINS=http://localhost:5151,http://localhost:5153
          PORT=1323
          GRPC_PORT=50053
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
          DB_SQLITE_PATH=/dbdata/sqlite/junjo.db
          DB_DUCKDB_PATH=/dbdata/duckdb/traces.duckdb
          BADGERDB_PATH=/dbdata/badgerdb
          LOG_LEVEL=info
          LOG_FORMAT=text
          EOF

      - name: Create Docker network
        run: docker network create junjo-network

      - name: Start services with Docker Compose
        run: |
          docker compose up -d --build
          echo "Waiting for services to be healthy..."
          sleep 15

      - name: Check service health
        run: |
          docker compose ps
          docker compose logs backend

      - name: Install uv in backend container
        run: docker compose exec -T backend pip install uv

      - name: Run E2E integration tests in Docker
        run: |
          docker compose exec -T backend uv run pytest -m "integration" -v

      - name: Test frontend connectivity
        run: |
          curl -f http://localhost:5153 || echo "Frontend not responding"

      - name: Test backend API
        run: |
          curl -f http://localhost:1323/health || echo "Backend not responding"

      - name: Test ingestion endpoint
        run: |
          # Basic gRPC health check
          docker compose exec -T ingestion grpc_health_probe -addr=localhost:50052 || echo "Ingestion not responding"

      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Backend Logs ==="
          docker compose logs backend
          echo "=== Ingestion Logs ==="
          docker compose logs ingestion
          echo "=== Frontend Logs ==="
          docker compose logs frontend

      - name: Cleanup
        if: always()
        run: docker compose down -v
